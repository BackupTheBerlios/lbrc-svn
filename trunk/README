2 =====================================================
=== Linux Bluetooth Remote Control ==================
===              LBRC              ==================
=====================================================

Preface
=======
This software is provided without any warranty. It should work ok, but
if it eats your computer, its not my problem.

For Users of 0.3
================
You have to install the new J2ME client onto your phone! The wire protocol was
change in an incompatible way!

Description
===========
A small programm allowing a Java 2 ME and bluetooth enabled device to control a
linux computer. It consists of a client part on the device and a server part on
the controlled computer.

The basic approach of injecting input events via the uinput Device in Linux
Kernel 2.6.x. This also means, that the user running LBRC will be required to
have write access to the device (currently assumed as /dev/input/uinput). This
approach was inspired by the WiiMote(??) Driver written in Python.

The J2ME Part does two things: Scan for an device, where our Service is running
and then just send keycodes from the device with additional info, wheter the
key was pressed or released.

The Server part receives these keycodes and according to a config file
(profiles.conf) maps these to keystrokes, mouse movement, mousewheel movement
or mousebutton clicks. In the development process more modules were created
see below.


Usage
===============
Please note: You can ran LBRC either directly from this directory, then you
have to call "build_dbus_uinput_bridge" first. Or you can install it system
wide by running "setup.py build" and "setup.py install".

   0. make sure uinput device driver is available (module is called uinput),
      check that "uinputdevice" in "config.conf" points to your device entry for
      uinput (known locations: /dev/input/uinput or /dev/misc/uinput) and this
      device is writeable by you

   0a. if the uinput module is not available, you can enable it by recompiling
       your kernel you find the option unter  
       DeviceDrivers/InputDeviceSupport/MiscellaneousDrivers/User Level Driver Support

   1. install the LBRC.jad/LBRC.jar File in j2me-build onto your phone

   2. run ./LBRCdbus.py (it's adviced to run it on the console, at
      least the first time)
   
   2a. if no error is printed - press CTRL-C, ignore the error and start LBRC-applet
   
   2b. else run LBRCdbus.py --debug and try to fix the errors or contact 
       lbrc-devel@lists.berlios.de with the error messages.

   3. Make your computer visible (see the LBRC applet or another config programm)
      (at least mine is per default not visible)

   4. run LBRC on your phone, choose your PC

   5. Enjoy - the Mouse/Keyboard Profile should work with any mobile (at least
      the functions mapped to the number keys should work: 2=UP, 4=LEFT, 5=DOWN, 
      6=RIGHT, 9=PAGE_UP, *=PAGE_DOWN, 1=MIDDLE_MOUSE_BUTTON, 3=RIGHT_MOUSE_BUTTON,
      8=MOUSE_WHEEL_UP, 0=MOUSE_WHEEL_DOWN
      
Config
======

You can either edit the .lbrc.conf, that is placed into you homedir (make sure
LBRC is closed, as the file is overwriten on close) or you can use the gui. The
last way is recommed. Right click on the LBRC Icon in your panel and select 
"Settings". On the first page you can modify some generic behaviour, on the 
second page you find the profile editor, where you can create your own profiles.

Just press the "New" Button, select a profile you want to base the new profile on
and give the profile a name. Then feel free to modify the profile. Please note:
a profile can contain functions from all the available modules (Mouse/Keyboard,
CommandExecutor, MPlayer and DBUSCaller)

Modules
=======
Keyboard/Mouse
--------------
Inject mouse and keyboard events into the kernel. The module can generate
mouse axis, mouse wheel, mouse button and keybutton events. If you specify keybutton
as event, then you can create combinations, like CTRL+C or 
"A n SPACE E n t r y". This means: You can combine key to be pressed together by
concatenation them with + and create a sequency place a space between each key.

For the key names please refer to doc/includes/input.h.

DBUSCaller
----------
This module enables arbitrary DBUS calls. These calls are specified by the
service, object, interface and the method to be called. Please compare to
the Rhythmbox Profile for an example.

CommandExecutor
---------------
Call arbitrary progamms in reaction to a keypress. You have to specify the
complete path to the programm!

MPlayer
-------
This module offers a MPlayer, that can be controlled by the slave commands. Execute
"mplayer -input cmdlist" for a complete list of available commands.

Two more commands are defined:
toggle_onoff: If a mplayer instance is running close it, else start one new one
switch_on:    If no mplayer instance is running start one

There is always only one MPlayer instance running!

Requirements
============
DBUS Part
        * uinput Device
        * python gobject bindinds
        * pybluez
        * python-json
        * python-dbus

GnomeUI Part
        * python-dbus
        * python-notify
        * python-gnome2-extras (egg.trayicon)

Help/Bugs
=========
Please contact lbrc-devel@lists.berlios.de if you experience problems.

Author
======
Matthias Bl√§sing <matthias.blaesing@rwth-aachen.de>

License
=======
GPLv2